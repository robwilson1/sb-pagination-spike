/* eslint-disable @next/next/no-page-custom-font */

import { useMemo, useEffect, useState } from "react";
import useSWR from "swr";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Selector } from "../components/selector";
import TablePagination from "@mui/material/TablePagination";
import Skeleton from "@mui/material/Skeleton";
import Box from "@mui/material/Box";

import {
  parseParams,
  getReviewsParams,
  paginationFetcher,
  getMakeOptions,
  getModelOptions,
} from "../lib/api";

export default function Home({ initialData, initialKey, allMakes }) {
  const [page, setPage] = useState(initialData.page || 1);
  const [rowsPerPage, setRowsPerPage] = useState(initialData.perPage || 25);
  const [key, setKey] = useState(initialKey);
  const [make, setMake] = useState("");
  const [modelOptions, setModelOptions] = useState([]);
  const [model, setModel] = useState("");

  const params = useMemo(() => {
    return {
      ...getReviewsParams({ make, model }),
      page,
      per_page: rowsPerPage,
    };
  }, [page, rowsPerPage, make, model]);

  useEffect(() => {
    const newKey = `https://api.storyblok.com/v2/cdn/stories/${parseParams(
      params
    )}`;
    if (key !== newKey) {
      setKey(newKey);
    }
  }, [params, key]);

  useEffect(() => {
    async function getAndSetModelOptions() {
      const modelOptions = await getModelOptions(make);
      setModelOptions(modelOptions);
    }

    getAndSetModelOptions();
  }, [make]);

  const { data, isValidating } = useSWR(key, paginationFetcher, {
    fallbackData: initialData,
  });

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(1);
  };

  const handleMakeChange = (event) => {
    setMake(event.target.value);
    setModel("");
  };

  const handleModelChange = (event) => {
    setModel(event.target.value);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/icon?family=Material+Icons"
        />
      </Head>

      <main className={styles.main}>
        <div className={styles.selectors}>
          <Selector
            label="make"
            value={make}
            handleChange={handleMakeChange}
            options={allMakes}
          />
          <Selector
            label="model"
            value={model}
            handleChange={handleModelChange}
            options={modelOptions}
            disabled={!make}
          />
        </div>

        <Box>
          {isValidating ? (
            Array.from({ length: rowsPerPage }, (_, i) => (
              <Skeleton animation="wave" key={i} variant="text" width={300} />
            ))
          ) : (
            <ul className={styles.list}>
              {data.stories.map((s) => (
                <li key={s.id}>{s.name}</li>
              ))}
            </ul>
          )}
        </Box>

        <TablePagination
          component="div"
          count={data.total}
          page={page}
          onPageChange={handleChangePage}
          rowsPerPage={rowsPerPage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </main>
    </div>
  );
}

export async function getStaticProps({ preview = false }) {
  const params = { ...getReviewsParams({ preview }), page: 1, per_page: 25 };
  const initialKey = `https://api.storyblok.com/v2/cdn/stories/${parseParams(
    params
  )}`;
  const initialData = await paginationFetcher(initialKey);
  const allMakes = await getMakeOptions();

  return {
    props: {
      initialData,
      initialKey,
      allMakes,
    },
  };
}
